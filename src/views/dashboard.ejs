<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Text Analyzer - Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        .top-header {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 16px;
            padding: 1.5rem 2rem;
            margin-bottom: 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            color: white;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .user-avatar {
            border-radius: 50%;
            border: 3px solid rgba(255, 255, 255, 0.3);
            transition: transform 0.3s ease;
        }

        .user-avatar:hover {
            transform: scale(1.05);
        }

        .user-details p {
            margin: 0;
            font-size: 0.95rem;
            opacity: 0.9;
        }

        .logout-btn {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
            padding: 0.5rem 1rem;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.9rem;
            text-decoration: none;
            display: inline-block;
        }

        .logout-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-1px);
        }

        .header {
            text-align: center;
            margin-bottom: 3rem;
            color: white;
        }

        .header h1 {
            font-size: 2.5rem;
            font-weight: 300;
            margin-bottom: 0.5rem;
            letter-spacing: -1px;
        }

        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .main-content {
            display: grid;
            grid-template-columns: 1fr 350px;
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .analyzer-section {
            background: white;
            border-radius: 16px;
            padding: 2rem;
            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
        }

        .stats-panel {
            background: white;
            border-radius: 16px;
            padding: 2rem;
            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
        }

        .textarea-container {
            position: relative;
            margin-bottom: 1.5rem;
        }

        textarea {
            width: 100%;
            min-height: 300px;
            padding: 1.5rem;
            border: 2px solid #e1e5e9;
            border-radius: 12px;
            font-size: 1rem;
            line-height: 1.6;
            resize: vertical;
            transition: border-color 0.3s ease;
            font-family: inherit;
        }

        textarea:focus {
            outline: none;
            border-color: #667eea;
        }

        .char-count {
            position: absolute;
            bottom: 10px;
            right: 15px;
            font-size: 0.85rem;
            color: #6b7280;
            background: white;
            padding: 2px 6px;
            border-radius: 4px;
        }

        .controls {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 8px;
            font-size: 0.95rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }

        .btn-secondary {
            background: #f8f9fa;
            color: #6b7280;
            border: 1px solid #e1e5e9;
        }

        .btn-secondary:hover {
            background: #e9ecef;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: #f8f9fa;
            padding: 1.5rem;
            border-radius: 12px;
            text-align: center;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: 700;
            color: #667eea;
            display: block;
        }

        .stat-label {
            font-size: 0.85rem;
            color: #6b7280;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-top: 0.5rem;
        }

        .analysis-results {
            background: white;
            border-radius: 16px;
            padding: 2rem;
            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
        }

        .metric-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 0;
            border-bottom: 1px solid #f1f3f4;
        }

        .metric-row:last-child {
            border-bottom: none;
        }

        .metric-label {
            font-weight: 500;
            color: #374151;
        }

        .metric-value {
            font-weight: 600;
            color: #667eea;
        }

        .section-title {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            color: #374151;
        }

        .file-upload {
            margin-bottom: 1rem;
        }

        .file-input-wrapper {
            position: relative;
            display: inline-block;
        }

        .file-input {
            position: absolute;
            opacity: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }

        .file-label {
            display: inline-block;
            padding: 0.75rem 1.5rem;
            background: #f8f9fa;
            border: 2px dashed #e1e5e9;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.95rem;
            color: #6b7280;
        }

        .file-label:hover {
            border-color: #667eea;
            background: #f0f4ff;
        }

        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
            
            .controls {
                flex-direction: column;
            }
            
            .header h1 {
                font-size: 2rem;
            }

            .top-header {
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }

            .user-info {
                flex-direction: column;
                text-align: center;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="top-header">
            <div class="user-info">
                <img src="<%= user.avatarUrl %>" alt="Profile Picture" width="60" height="60" class="user-avatar" />
                <div class="user-details">
                    <p>Welcome <strong><%= user.name %></strong></p>
                </div>
            </div>
            <button class="logout-btn" onclick="logout()">Logout</button>
        </div>

        <div class="header">
            <h1>Text Analyzer</h1>
            <p>Analyze your text with advanced metrics and insights</p>
        </div>

        <div class="main-content">
            <div class="analyzer-section">
                <h2 class="section-title">Input Text</h2>
                
                <div class="file-upload">
                    <div class="file-input-wrapper">
                        <input type="file" id="fileInput" class="file-input" accept=".txt,.doc,.docx">
                        <label for="fileInput" class="file-label">üìÅ Upload Document</label>
                    </div>
                </div>

                <div class="textarea-container">
                    <textarea id="textInput" placeholder="Paste your text here or upload a document above..."></textarea>
                    <div class="char-count" id="charCount">0 characters</div>
                </div>

                <div class="controls">
                    <button class="btn btn-primary" onclick="analyzeText()">Analyze Text</button>
                    <button class="btn btn-secondary" onclick="clearText()">Clear</button>
                    <button class="btn btn-secondary" onclick="exportResults()">Export Results</button>
                </div>
            </div>

            <div class="stats-panel">
                <h2 class="section-title">Quick Stats</h2>
                <div class="stats-grid">
                    <div class="stat-card">
                        <span class="stat-number" id="wordCount">0</span>
                        <div class="stat-label">Words</div>
                    </div>
                    <div class="stat-card">
                        <span class="stat-number" id="sentenceCount">0</span>
                        <div class="stat-label">Sentences</div>
                    </div>
                    <div class="stat-card">
                        <span class="stat-number" id="paragraphCount">0</span>
                        <div class="stat-label">Paragraphs</div>
                    </div>
                    <div class="stat-card">
                        <span class="stat-number" id="readTime">0</span>
                        <div class="stat-label">Min Read</div>
                    </div>
                </div>
            </div>
        </div>

        <div class="analysis-results">
            <h2 class="section-title">Detailed Analysis</h2>
            <div id="detailedResults">
                <div class="metric-row">
                    <span class="metric-label">Characters (with spaces)</span>
                    <span class="metric-value" id="charWithSpaces">0</span>
                </div>
                <div class="metric-row">
                    <span class="metric-label">Characters (without spaces)</span>
                    <span class="metric-value" id="charWithoutSpaces">0</span>
                </div>
                <div class="metric-row">
                    <span class="metric-label">Average words per sentence</span>
                    <span class="metric-value" id="avgWordsPerSentence">0</span>
                </div>
                <div class="metric-row">
                    <span class="metric-label">Average characters per word</span>
                    <span class="metric-value" id="avgCharsPerWord">0</span>
                </div>
                <div class="metric-row">
                    <span class="metric-label">Readability Score</span>
                    <span class="metric-value" id="readabilityScore">-</span>
                </div>
                <div class="metric-row">
                    <span class="metric-label">Most common word</span>
                    <span class="metric-value" id="commonWord">-</span>
                </div>
                <div class="metric-row">
                    <span class="metric-label">Longest Words</span>
                    <span class="metric-value" id="longestWords">-</span>
                </div>
            </div>
        </div>
    </div>

    <script>
    const baseUrl = 'http://localhost/api';
    const rawToken = '<%= user.token %>';
    const token = `Bearer ${rawToken}`;

    const textInput = document.getElementById('textInput');

    function updateUIFromAPI(analysis) {
        // Character counts
        document.getElementById('charCount').textContent = `${analysis.charCount ?? 0} characters`;
        document.getElementById('charWithSpaces').textContent = analysis.charCount ?? '';
        document.getElementById('charWithoutSpaces').textContent = analysis.charCountWithoutSpaces ?? '';

        // Basic stats
        document.getElementById('wordCount').textContent = analysis.wordCount ?? '';
        document.getElementById('sentenceCount').textContent = analysis.sentenceCount ?? '';
        document.getElementById('paragraphCount').textContent = analysis.paragraphCount ?? '';

        // Averages
        document.getElementById('avgWordsPerSentence').textContent = analysis.avgWordsPerSentence?.toFixed(2) ?? '';
        document.getElementById('avgCharsPerWord').textContent = analysis.avgCharsPerWord?.toFixed(2) ?? '';

        // Most common word
        document.getElementById('commonWord').textContent = analysis.mostCommonWord ?? '';

        // Readability score
        document.getElementById('readabilityScore').textContent = analysis.readabilityScore?.toFixed(2) ?? '';

        // Longest words
        if (analysis.longestWords && analysis.longestWords.length > 0) {
            document.getElementById('longestWords').textContent = analysis.longestWords.join(', ');
        } else {
            document.getElementById('longestWords').textContent = '';
        }

        // Estimated read time (assume 200 words per minute)
        document.getElementById('readTime').textContent = analysis.wordCount ? `${Math.ceil(analysis.wordCount / 200)} min` : '';
    }

    async function analyzeText() {
        const text = textInput.value;
        console.log('Analyzing text:', text);
        if (!text) {
            alert('Please enter some text to analyze.');
            return;
        }

        try {
            // Step 1: Create the text entry
            const createRes = await fetch(`${baseUrl}/texts`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `${token}`
                },
                body: JSON.stringify({ content: text })
            });

            if (!createRes.ok) {
                const errorText = await createRes.text();
                console.error('Create Text API failed:', createRes.status, errorText);
                alert('Text creation failed. Please check API and token.');
                return;
            }

            const createData = await createRes.json();
            console.log('Create Response Status:', createRes.status);
            console.log('Create Response Data:', createData);

            if (!createData.status || !createData.data?.id) {
                throw new Error('Failed to create text.');
            }

            const textId = createData.data.id;
            console.log('Created Text ID:', `${baseUrl}/texts/${textId}/analysis`);

            // Step 2: Fetch analysis
            const analysisRes = await fetch(`${baseUrl}/texts/${textId}/analysis`, {
                headers: {
                    'Authorization': `${token}`
                }
            });

            const analysisData = await analysisRes.json();
            console.log('Analysis Response Status:', analysisRes.status);
            console.log('Analysis Data:', analysisData);

            if (!analysisData.status || !analysisData.data) {
                throw new Error('Failed to get analysis.');
            }

            // Step 3: Update UI
            updateUIFromAPI(analysisData.data);

            // Smooth scroll to results
            document.querySelector('.analysis-results').scrollIntoView({ behavior: 'smooth' });

        } catch (err) {
            console.error('Error analyzing text:', err);
            alert('An error occurred while analyzing text.');
        }
    }

    function clearText() {
        textInput.value = '';
        document.getElementById('charCount').textContent = '';
        document.getElementById('wordCount').textContent = '';
        document.getElementById('sentenceCount').textContent = '';
        document.getElementById('paragraphCount').textContent = '';
        document.getElementById('charWithSpaces').textContent = '';
        document.getElementById('charWithoutSpaces').textContent = '';
        document.getElementById('avgWordsPerSentence').textContent = '';
        document.getElementById('avgCharsPerWord').textContent = '';
        document.getElementById('commonWord').textContent = '';
        document.getElementById('readabilityScore').textContent = '';
        document.getElementById('longestWords').textContent = '';
        document.getElementById('readTime').textContent = '';
    }

    function logout() {
        if (confirm('Are you sure you want to logout?')) {
            alert('Logging out...');
        }
    }

    document.getElementById('fileInput').addEventListener('change', function (e) {
        const file = e.target.files[0];
        if (file && file.type === 'text/plain') {
            const reader = new FileReader();
            reader.onload = function (e) {
                textInput.value = e.target.result;
            };
            reader.readAsText(file);
        } else if (file) {
            alert('Please upload a .txt file for now. Other formats coming soon!');
        }
    });
</script>
</body>
</html>